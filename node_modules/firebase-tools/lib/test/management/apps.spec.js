"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const sinon = require("sinon");
const util = require("util");
const api = require("../../api");
const apps_1 = require("../../management/apps");
const pollUtils = require("../../operation-poller");
const helpers_1 = require("../helpers");
const error_1 = require("../../error");
const PROJECT_ID = "the-best-firebase-project";
const OPERATION_RESOURCE_NAME_1 = "operations/cp.11111111111111111";
const APP_ID = "appId";
const IOS_APP_BUNDLE_ID = "bundleId";
const IOS_APP_STORE_ID = "appStoreId";
const IOS_APP_DISPLAY_NAME = "iOS app";
const ANDROID_APP_PACKAGE_NAME = "com.google.packageName";
const ANDROID_APP_DISPLAY_NAME = "Android app";
const WEB_APP_DISPLAY_NAME = "Web app";
function generateIosAppList(counts) {
    return Array.from(Array(counts), (_, i) => ({
        name: `projects/project-id-${i}/apps/app-id-${i}`,
        projectId: `project-id`,
        appId: `app-id-${i}`,
        platform: apps_1.AppPlatform.IOS,
        displayName: `Project ${i}`,
        bundleId: `bundle-id-${i}`,
    }));
}
function generateAndroidAppList(counts) {
    return Array.from(Array(counts), (_, i) => ({
        name: `projects/project-id-${i}/apps/app-id-${i}`,
        projectId: `project-id`,
        appId: `app-id-${i}`,
        platform: apps_1.AppPlatform.ANDROID,
        displayName: `Project ${i}`,
        packageName: `package.name.app${i}`,
    }));
}
function generateWebAppList(counts) {
    return Array.from(Array(counts), (_, i) => ({
        name: `projects/project-id-${i}/apps/app-id-${i}`,
        projectId: `project-id`,
        appId: `app-id-${i}`,
        platform: apps_1.AppPlatform.WEB,
        displayName: `Project ${i}`,
    }));
}
describe("App management", () => {
    let sandbox;
    let apiRequestStub;
    let pollOperationStub;
    beforeEach(() => {
        sandbox = sinon.createSandbox();
        helpers_1.mockAuth(sandbox);
        apiRequestStub = sandbox.stub(api, "request").throws("Unexpected API request call");
        pollOperationStub = sandbox.stub(pollUtils, "pollOperation").throws("Unexpected poll call");
    });
    afterEach(() => {
        sandbox.restore();
    });
    describe("getAppPlatform", () => {
        it("should return the iOS platform", () => {
            chai_1.expect(apps_1.getAppPlatform("IOS")).to.equal(apps_1.AppPlatform.IOS);
            chai_1.expect(apps_1.getAppPlatform("iOS")).to.equal(apps_1.AppPlatform.IOS);
            chai_1.expect(apps_1.getAppPlatform("Ios")).to.equal(apps_1.AppPlatform.IOS);
        });
        it("should return the Android platform", () => {
            chai_1.expect(apps_1.getAppPlatform("Android")).to.equal(apps_1.AppPlatform.ANDROID);
            chai_1.expect(apps_1.getAppPlatform("ANDROID")).to.equal(apps_1.AppPlatform.ANDROID);
            chai_1.expect(apps_1.getAppPlatform("aNDroiD")).to.equal(apps_1.AppPlatform.ANDROID);
        });
        it("should return the Web platform", () => {
            chai_1.expect(apps_1.getAppPlatform("Web")).to.equal(apps_1.AppPlatform.WEB);
            chai_1.expect(apps_1.getAppPlatform("WEB")).to.equal(apps_1.AppPlatform.WEB);
            chai_1.expect(apps_1.getAppPlatform("wEb")).to.equal(apps_1.AppPlatform.WEB);
        });
        it("should return the ANY platform", () => {
            chai_1.expect(apps_1.getAppPlatform("")).to.equal(apps_1.AppPlatform.ANY);
        });
        it("should throw if the platform is unknown", () => {
            chai_1.expect(() => apps_1.getAppPlatform("unknown")).to.throw(error_1.FirebaseError, "Unexpected platform. Only iOS, Android, and Web apps are supported");
        });
    });
    describe("createIosApp", () => {
        it("should resolve with app data if it succeeds", () => __awaiter(this, void 0, void 0, function* () {
            const expectedAppMetadata = {
                appId: APP_ID,
                displayName: IOS_APP_DISPLAY_NAME,
                bundleId: IOS_APP_BUNDLE_ID,
                appStoreId: IOS_APP_STORE_ID,
            };
            apiRequestStub.onFirstCall().resolves({ body: { name: OPERATION_RESOURCE_NAME_1 } });
            pollOperationStub.onFirstCall().resolves(expectedAppMetadata);
            const resultAppInfo = yield apps_1.createIosApp(PROJECT_ID, {
                displayName: IOS_APP_DISPLAY_NAME,
                bundleId: IOS_APP_BUNDLE_ID,
                appStoreId: IOS_APP_STORE_ID,
            });
            chai_1.expect(resultAppInfo).to.deep.equal(expectedAppMetadata);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("POST", `/v1beta1/projects/${PROJECT_ID}/iosApps`, {
                auth: true,
                origin: api.firebaseApiOrigin,
                timeout: 15000,
                data: {
                    displayName: IOS_APP_DISPLAY_NAME,
                    bundleId: IOS_APP_BUNDLE_ID,
                    appStoreId: IOS_APP_STORE_ID,
                },
            });
            chai_1.expect(pollOperationStub).to.be.calledOnceWith({
                pollerName: "Create iOS app Poller",
                apiOrigin: api.firebaseApiOrigin,
                apiVersion: "v1beta1",
                operationResourceName: OPERATION_RESOURCE_NAME_1,
            });
        }));
        it("should reject if app creation api call fails", () => __awaiter(this, void 0, void 0, function* () {
            const expectedError = new Error("HTTP Error 404: Not Found");
            apiRequestStub.onFirstCall().rejects(expectedError);
            let err;
            try {
                yield apps_1.createIosApp(PROJECT_ID, {
                    displayName: IOS_APP_DISPLAY_NAME,
                    bundleId: IOS_APP_BUNDLE_ID,
                    appStoreId: IOS_APP_STORE_ID,
                });
            }
            catch (e) {
                err = e;
            }
            chai_1.expect(err.message).to.equal(`Failed to create iOS app for project ${PROJECT_ID}. See firebase-debug.log for more info.`);
            chai_1.expect(err.original).to.equal(expectedError);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("POST", `/v1beta1/projects/${PROJECT_ID}/iosApps`, {
                auth: true,
                origin: api.firebaseApiOrigin,
                timeout: 15000,
                data: {
                    displayName: IOS_APP_DISPLAY_NAME,
                    bundleId: IOS_APP_BUNDLE_ID,
                    appStoreId: IOS_APP_STORE_ID,
                },
            });
            chai_1.expect(pollOperationStub).to.be.not.called;
        }));
        it("should reject if polling throws error", () => __awaiter(this, void 0, void 0, function* () {
            const expectedError = new Error("Permission denied");
            apiRequestStub.onFirstCall().resolves({ body: { name: OPERATION_RESOURCE_NAME_1 } });
            pollOperationStub.onFirstCall().rejects(expectedError);
            let err;
            try {
                yield apps_1.createIosApp(PROJECT_ID, {
                    displayName: IOS_APP_DISPLAY_NAME,
                    bundleId: IOS_APP_BUNDLE_ID,
                    appStoreId: IOS_APP_STORE_ID,
                });
            }
            catch (e) {
                err = e;
            }
            chai_1.expect(err.message).to.equal(`Failed to create iOS app for project ${PROJECT_ID}. See firebase-debug.log for more info.`);
            chai_1.expect(err.original).to.equal(expectedError);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("POST", `/v1beta1/projects/${PROJECT_ID}/iosApps`, {
                auth: true,
                origin: api.firebaseApiOrigin,
                timeout: 15000,
                data: {
                    displayName: IOS_APP_DISPLAY_NAME,
                    bundleId: IOS_APP_BUNDLE_ID,
                    appStoreId: IOS_APP_STORE_ID,
                },
            });
            chai_1.expect(pollOperationStub).to.be.calledOnceWith({
                pollerName: "Create iOS app Poller",
                apiOrigin: api.firebaseApiOrigin,
                apiVersion: "v1beta1",
                operationResourceName: OPERATION_RESOURCE_NAME_1,
            });
        }));
    });
    describe("createAndroidApp", () => {
        it("should resolve with app data if it succeeds", () => __awaiter(this, void 0, void 0, function* () {
            const expectedAppMetadata = {
                appId: APP_ID,
                displayName: ANDROID_APP_DISPLAY_NAME,
                packageName: ANDROID_APP_PACKAGE_NAME,
            };
            apiRequestStub.onFirstCall().resolves({ body: { name: OPERATION_RESOURCE_NAME_1 } });
            pollOperationStub.onFirstCall().resolves(expectedAppMetadata);
            const resultAppInfo = yield apps_1.createAndroidApp(PROJECT_ID, {
                displayName: ANDROID_APP_DISPLAY_NAME,
                packageName: ANDROID_APP_PACKAGE_NAME,
            });
            chai_1.expect(resultAppInfo).to.equal(expectedAppMetadata);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("POST", `/v1beta1/projects/${PROJECT_ID}/androidApps`, {
                auth: true,
                origin: api.firebaseApiOrigin,
                timeout: 15000,
                data: {
                    displayName: ANDROID_APP_DISPLAY_NAME,
                    packageName: ANDROID_APP_PACKAGE_NAME,
                },
            });
            chai_1.expect(pollOperationStub).to.be.calledOnceWith({
                pollerName: "Create Android app Poller",
                apiOrigin: api.firebaseApiOrigin,
                apiVersion: "v1beta1",
                operationResourceName: OPERATION_RESOURCE_NAME_1,
            });
        }));
        it("should reject if app creation api call fails", () => __awaiter(this, void 0, void 0, function* () {
            const expectedError = new Error("HTTP Error 404: Not Found");
            apiRequestStub.onFirstCall().rejects(expectedError);
            let err;
            try {
                yield apps_1.createAndroidApp(PROJECT_ID, {
                    displayName: ANDROID_APP_DISPLAY_NAME,
                    packageName: ANDROID_APP_PACKAGE_NAME,
                });
            }
            catch (e) {
                err = e;
            }
            chai_1.expect(err.message).to.equal(`Failed to create Android app for project ${PROJECT_ID}. See firebase-debug.log for more info.`);
            chai_1.expect(err.original).to.equal(expectedError);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("POST", `/v1beta1/projects/${PROJECT_ID}/androidApps`, {
                auth: true,
                origin: api.firebaseApiOrigin,
                timeout: 15000,
                data: {
                    displayName: ANDROID_APP_DISPLAY_NAME,
                    packageName: ANDROID_APP_PACKAGE_NAME,
                },
            });
            chai_1.expect(pollOperationStub).to.be.not.called;
        }));
        it("should reject if polling throws error", () => __awaiter(this, void 0, void 0, function* () {
            const expectedError = new Error("Permission denied");
            apiRequestStub.onFirstCall().resolves({ body: { name: OPERATION_RESOURCE_NAME_1 } });
            pollOperationStub.onFirstCall().rejects(expectedError);
            let err;
            try {
                yield apps_1.createAndroidApp(PROJECT_ID, {
                    displayName: ANDROID_APP_DISPLAY_NAME,
                    packageName: ANDROID_APP_PACKAGE_NAME,
                });
            }
            catch (e) {
                err = e;
            }
            chai_1.expect(err.message).to.equal(`Failed to create Android app for project ${PROJECT_ID}. See firebase-debug.log for more info.`);
            chai_1.expect(err.original).to.equal(expectedError);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("POST", `/v1beta1/projects/${PROJECT_ID}/androidApps`, {
                auth: true,
                origin: api.firebaseApiOrigin,
                timeout: 15000,
                data: {
                    displayName: ANDROID_APP_DISPLAY_NAME,
                    packageName: ANDROID_APP_PACKAGE_NAME,
                },
            });
            chai_1.expect(pollOperationStub).to.be.calledOnceWith({
                pollerName: "Create Android app Poller",
                apiOrigin: api.firebaseApiOrigin,
                apiVersion: "v1beta1",
                operationResourceName: OPERATION_RESOURCE_NAME_1,
            });
        }));
    });
    describe("createWebApp", () => {
        it("should resolve with app data if it succeeds", () => __awaiter(this, void 0, void 0, function* () {
            const expectedAppMetadata = {
                appId: APP_ID,
                displayName: WEB_APP_DISPLAY_NAME,
            };
            apiRequestStub.onFirstCall().resolves({ body: { name: OPERATION_RESOURCE_NAME_1 } });
            pollOperationStub.onFirstCall().resolves(expectedAppMetadata);
            const resultAppInfo = yield apps_1.createWebApp(PROJECT_ID, { displayName: WEB_APP_DISPLAY_NAME });
            chai_1.expect(resultAppInfo).to.equal(expectedAppMetadata);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("POST", `/v1beta1/projects/${PROJECT_ID}/webApps`, {
                auth: true,
                origin: api.firebaseApiOrigin,
                timeout: 15000,
                data: {
                    displayName: WEB_APP_DISPLAY_NAME,
                },
            });
            chai_1.expect(pollOperationStub).to.be.calledOnceWith({
                pollerName: "Create Web app Poller",
                apiOrigin: api.firebaseApiOrigin,
                apiVersion: "v1beta1",
                operationResourceName: OPERATION_RESOURCE_NAME_1,
            });
        }));
        it("should reject if app creation api call fails", () => __awaiter(this, void 0, void 0, function* () {
            const expectedError = new Error("HTTP Error 404: Not Found");
            apiRequestStub.onFirstCall().rejects(expectedError);
            let err;
            try {
                yield apps_1.createWebApp(PROJECT_ID, { displayName: WEB_APP_DISPLAY_NAME });
            }
            catch (e) {
                err = e;
            }
            chai_1.expect(err.message).to.equal(`Failed to create Web app for project ${PROJECT_ID}. See firebase-debug.log for more info.`);
            chai_1.expect(err.original).to.equal(expectedError);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("POST", `/v1beta1/projects/${PROJECT_ID}/webApps`, {
                auth: true,
                origin: api.firebaseApiOrigin,
                timeout: 15000,
                data: {
                    displayName: WEB_APP_DISPLAY_NAME,
                },
            });
            chai_1.expect(pollOperationStub).to.be.not.called;
        }));
        it("should reject if polling throws error", () => __awaiter(this, void 0, void 0, function* () {
            const expectedError = new Error("Permission denied");
            apiRequestStub.onFirstCall().resolves({
                body: { name: OPERATION_RESOURCE_NAME_1 },
            });
            pollOperationStub.onFirstCall().rejects(expectedError);
            let err;
            try {
                yield apps_1.createWebApp(PROJECT_ID, { displayName: WEB_APP_DISPLAY_NAME });
            }
            catch (e) {
                err = e;
            }
            chai_1.expect(err.message).to.equal(`Failed to create Web app for project ${PROJECT_ID}. See firebase-debug.log for more info.`);
            chai_1.expect(err.original).to.equal(expectedError);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("POST", `/v1beta1/projects/${PROJECT_ID}/webApps`, {
                auth: true,
                origin: api.firebaseApiOrigin,
                timeout: 15000,
                data: {
                    displayName: WEB_APP_DISPLAY_NAME,
                },
            });
            chai_1.expect(pollOperationStub).to.be.calledOnceWith({
                pollerName: "Create Web app Poller",
                apiOrigin: api.firebaseApiOrigin,
                apiVersion: "v1beta1",
                operationResourceName: OPERATION_RESOURCE_NAME_1,
            });
        }));
    });
    describe("listFirebaseApps", () => {
        it("should resolve with app list if it succeeds with only 1 api call", () => __awaiter(this, void 0, void 0, function* () {
            const appCountsPerPlatform = 3;
            const expectedAppList = [
                ...generateIosAppList(appCountsPerPlatform),
                ...generateAndroidAppList(appCountsPerPlatform),
                ...generateWebAppList(appCountsPerPlatform),
            ];
            apiRequestStub.onFirstCall().resolves({ body: { apps: expectedAppList } });
            const apps = yield apps_1.listFirebaseApps(PROJECT_ID, apps_1.AppPlatform.ANY);
            chai_1.expect(apps).to.deep.equal(expectedAppList);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("GET", `/v1beta1/projects/${PROJECT_ID}:searchApps?pageSize=100`, {
                auth: true,
                origin: api.firebaseApiOrigin,
                timeout: 30000,
            });
        }));
        it("should resolve with iOS app list", () => __awaiter(this, void 0, void 0, function* () {
            const appCounts = 10;
            const expectedAppList = generateIosAppList(appCounts);
            const apiResponseAppList = expectedAppList.map((app) => {
                const iosApp = Object.assign({}, app);
                delete iosApp.platform;
                return iosApp;
            });
            apiRequestStub.onFirstCall().resolves({ body: { apps: apiResponseAppList } });
            const apps = yield apps_1.listFirebaseApps(PROJECT_ID, apps_1.AppPlatform.IOS);
            chai_1.expect(apps).to.deep.equal(expectedAppList);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("GET", `/v1beta1/projects/${PROJECT_ID}/iosApps?pageSize=100`);
        }));
        it("should resolve with Android app list", () => __awaiter(this, void 0, void 0, function* () {
            const appCounts = 10;
            const expectedAppList = generateAndroidAppList(appCounts);
            const apiResponseAppList = expectedAppList.map((app) => {
                const androidApps = Object.assign({}, app);
                delete androidApps.platform;
                return androidApps;
            });
            apiRequestStub.onFirstCall().resolves({ body: { apps: apiResponseAppList } });
            const apps = yield apps_1.listFirebaseApps(PROJECT_ID, apps_1.AppPlatform.ANDROID);
            chai_1.expect(apps).to.deep.equal(expectedAppList);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("GET", `/v1beta1/projects/${PROJECT_ID}/androidApps?pageSize=100`);
        }));
        it("should resolve with Web app list", () => __awaiter(this, void 0, void 0, function* () {
            const appCounts = 10;
            const expectedAppList = generateWebAppList(appCounts);
            const apiResponseAppList = expectedAppList.map((app) => {
                const webApp = Object.assign({}, app);
                delete webApp.platform;
                return webApp;
            });
            apiRequestStub.onFirstCall().resolves({ body: { apps: apiResponseAppList } });
            const apps = yield apps_1.listFirebaseApps(PROJECT_ID, apps_1.AppPlatform.WEB);
            chai_1.expect(apps).to.deep.equal(expectedAppList);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("GET", `/v1beta1/projects/${PROJECT_ID}/webApps?pageSize=100`);
        }));
        it("should concatenate pages to get app list if it succeeds", () => __awaiter(this, void 0, void 0, function* () {
            const appCountsPerPlatform = 3;
            const pageSize = 5;
            const nextPageToken = "next-page-token";
            const expectedAppList = [
                ...generateIosAppList(appCountsPerPlatform),
                ...generateAndroidAppList(appCountsPerPlatform),
                ...generateWebAppList(appCountsPerPlatform),
            ];
            apiRequestStub
                .onFirstCall()
                .resolves({ body: { apps: expectedAppList.slice(0, pageSize), nextPageToken } })
                .onSecondCall()
                .resolves({ body: { apps: expectedAppList.slice(pageSize, appCountsPerPlatform * 3) } });
            const apps = yield apps_1.listFirebaseApps(PROJECT_ID, apps_1.AppPlatform.ANY, pageSize);
            chai_1.expect(apps).to.deep.equal(expectedAppList);
            chai_1.expect(apiRequestStub.firstCall).to.be.calledWith("GET", `/v1beta1/projects/${PROJECT_ID}:searchApps?pageSize=${pageSize}`);
            chai_1.expect(apiRequestStub.secondCall).to.be.calledWith("GET", `/v1beta1/projects/${PROJECT_ID}:searchApps?pageSize=${pageSize}&pageToken=${nextPageToken}`);
        }));
        it("should reject if the first api call fails", () => __awaiter(this, void 0, void 0, function* () {
            const expectedError = new Error("HTTP Error 404: Not Found");
            apiRequestStub.onFirstCall().rejects(expectedError);
            let err;
            try {
                yield apps_1.listFirebaseApps(PROJECT_ID, apps_1.AppPlatform.ANY);
            }
            catch (e) {
                err = e;
            }
            chai_1.expect(err.message).to.equal("Failed to list Firebase apps. See firebase-debug.log for more info.");
            chai_1.expect(err.original).to.equal(expectedError);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("GET", `/v1beta1/projects/${PROJECT_ID}:searchApps?pageSize=100`);
        }));
        it("should rejects if error is thrown in subsequence api call", () => __awaiter(this, void 0, void 0, function* () {
            const appCounts = 10;
            const pageSize = 5;
            const nextPageToken = "next-page-token";
            const expectedAppList = generateAndroidAppList(appCounts);
            const expectedError = new Error("HTTP Error 400: unexpected error");
            apiRequestStub
                .onFirstCall()
                .resolves({ body: { apps: expectedAppList.slice(0, pageSize), nextPageToken } })
                .onSecondCall()
                .rejects(expectedError);
            let err;
            try {
                yield apps_1.listFirebaseApps(PROJECT_ID, apps_1.AppPlatform.ANY, pageSize);
            }
            catch (e) {
                err = e;
            }
            chai_1.expect(err.message).to.equal("Failed to list Firebase apps. See firebase-debug.log for more info.");
            chai_1.expect(err.original).to.equal(expectedError);
            chai_1.expect(apiRequestStub.firstCall).to.be.calledWith("GET", `/v1beta1/projects/${PROJECT_ID}:searchApps?pageSize=${pageSize}`);
            chai_1.expect(apiRequestStub.secondCall).to.be.calledWith("GET", `/v1beta1/projects/${PROJECT_ID}:searchApps?pageSize=${pageSize}&pageToken=${nextPageToken}`);
        }));
        it("should reject if the list iOS apps fails", () => __awaiter(this, void 0, void 0, function* () {
            const expectedError = new Error("HTTP Error 404: Not Found");
            apiRequestStub.onFirstCall().rejects(expectedError);
            let err;
            try {
                yield apps_1.listFirebaseApps(PROJECT_ID, apps_1.AppPlatform.IOS);
            }
            catch (e) {
                err = e;
            }
            chai_1.expect(err.message).to.equal("Failed to list Firebase IOS apps. See firebase-debug.log for more info.");
            chai_1.expect(err.original).to.equal(expectedError);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("GET", `/v1beta1/projects/${PROJECT_ID}/iosApps?pageSize=100`);
        }));
        it("should reject if the list Android apps fails", () => __awaiter(this, void 0, void 0, function* () {
            const expectedError = new Error("HTTP Error 404: Not Found");
            apiRequestStub.onFirstCall().rejects(expectedError);
            let err;
            try {
                yield apps_1.listFirebaseApps(PROJECT_ID, apps_1.AppPlatform.ANDROID);
            }
            catch (e) {
                err = e;
            }
            chai_1.expect(err.message).to.equal("Failed to list Firebase ANDROID apps. See firebase-debug.log for more info.");
            chai_1.expect(err.original).to.equal(expectedError);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("GET", `/v1beta1/projects/${PROJECT_ID}/androidApps?pageSize=100`);
        }));
        it("should reject if the list Web apps fails", () => __awaiter(this, void 0, void 0, function* () {
            const expectedError = new Error("HTTP Error 404: Not Found");
            apiRequestStub.onFirstCall().rejects(expectedError);
            let err;
            try {
                yield apps_1.listFirebaseApps(PROJECT_ID, apps_1.AppPlatform.WEB);
            }
            catch (e) {
                err = e;
            }
            chai_1.expect(err.message).to.equal("Failed to list Firebase WEB apps. See firebase-debug.log for more info.");
            chai_1.expect(err.original).to.equal(expectedError);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("GET", `/v1beta1/projects/${PROJECT_ID}/webApps?pageSize=100`);
        }));
    });
    describe("getAppConfig", () => {
        it("should resolve with iOS app configuration if it succeeds", () => __awaiter(this, void 0, void 0, function* () {
            const mockBase64Content = "dGVzdCBpT1MgY29uZmlndXJhdGlvbg==";
            const expectedConfigFileContent = "test iOS configuration";
            apiRequestStub.onFirstCall().resolves({
                body: { configFilename: "GoogleService-Info.plist", configFileContents: mockBase64Content },
            });
            const configData = yield apps_1.getAppConfig(APP_ID, apps_1.AppPlatform.IOS);
            chai_1.expect(configData).to.deep.equal({
                fileName: "GoogleService-Info.plist",
                fileContents: expectedConfigFileContent,
            });
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("GET", `/v1beta1/projects/-/iosApps/${APP_ID}/config`);
        }));
        it("should resolve with Android app configuration if it succeeds", () => __awaiter(this, void 0, void 0, function* () {
            const mockBase64Content = "dGVzdCBBbmRyb2lkIGNvbmZpZ3VyYXRpb24=";
            const expectedConfigFileContent = "test Android configuration";
            apiRequestStub.onFirstCall().resolves({
                body: { configFilename: "google-services.json", configFileContents: mockBase64Content },
            });
            const configData = yield apps_1.getAppConfig(APP_ID, apps_1.AppPlatform.ANDROID);
            chai_1.expect(configData).to.deep.equal({
                fileName: "google-services.json",
                fileContents: expectedConfigFileContent,
            });
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("GET", `/v1beta1/projects/-/androidApps/${APP_ID}/config`);
        }));
        it("should resolve with Web app configuration if it succeeds", () => __awaiter(this, void 0, void 0, function* () {
            const mockWebConfig = {
                projectId: PROJECT_ID,
                appId: APP_ID,
                apiKey: "api-key",
            };
            apiRequestStub.onFirstCall().resolves({ body: mockWebConfig });
            const configData = yield apps_1.getAppConfig(APP_ID, apps_1.AppPlatform.WEB);
            chai_1.expect(configData).to.deep.equal({
                fileName: "google-config.js",
                fileContents: util.inspect(mockWebConfig, { compact: false }),
            });
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("GET", `/v1beta1/projects/-/webApps/${APP_ID}/config`);
        }));
        it("should reject if api request fails", () => __awaiter(this, void 0, void 0, function* () {
            const expectedError = new Error("HTTP Error 404: Not Found");
            apiRequestStub.onFirstCall().rejects(expectedError);
            let err;
            try {
                yield apps_1.getAppConfig(APP_ID, apps_1.AppPlatform.ANDROID);
            }
            catch (e) {
                err = e;
            }
            chai_1.expect(err.message).to.equal("Failed to get ANDROID app configuration. See firebase-debug.log for more info.");
            chai_1.expect(err.original).to.equal(expectedError);
            chai_1.expect(apiRequestStub).to.be.calledOnceWith("GET", `/v1beta1/projects/-/androidApps/${APP_ID}/config`);
        }));
    });
});
//# sourceMappingURL=apps.spec.js.map